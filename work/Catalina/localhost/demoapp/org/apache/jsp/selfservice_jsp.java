/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.56
 * Generated at: 2020-03-24 17:03:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;
import javax.servlet.*;
import org.json.simple.*;
import org.json.simple.parser.*;
import java.net.*;

public final class selfservice_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


// 
// Just run local shell commands for now ... 
// FUTURE: Convert to API calls directly to Engine 
//
public String doCommand(String cmd){
   String directory = "";
   try {
      int exitCode;
      // out.println("Setting Shell Environment ...");
      String [] params = new String[]{"/bin/bash", "-c", "cd "+System.getProperty("user.home")+";. ./.delphix_profile 1> /dev/null;set -e;" + cmd };
      //String [] params = new String[]{"/bin/bash", "-c", "cd "+System.getProperty("user.home")+";. ./.delphix_profile 1> /dev/null;set -e;" + ""+request.getParameter("dir")};
      int c;
      BufferedReader b;
      // System.out.println("Parameters ..."+params);
      Process subProc = Runtime.getRuntime().exec(params);
      StringBuffer sb = new StringBuffer();
      // System.out.println("Opening Buffer for Reading ...");
      b = new BufferedReader(new InputStreamReader(subProc.getInputStream()));
      c = b.read();
      while (c != -1) {
        sb.append((char)c);
        c = b.read();
      }
      b.close();
      // System.out.println("Buffer Closed ...");
      exitCode = subProc.waitFor();
      if (exitCode != 0) {
        sb = new StringBuffer();
        b = new BufferedReader(new InputStreamReader(subProc.getErrorStream()));
        c = b.read();
        while (c != -1) {
           sb.append((char)c);
           c = b.read();
        }    //end while
        b.close();
        System.out.println("ERROR: Output from 'doCommand' "+ sb.toString());
      } else {
         //System.out.println("Output from 'doCommand' "+ sb.toString());
         directory =  sb.toString().trim();
      }
   } catch(Exception e) {
      System.out.println("ERROR: "+e.getMessage());
   }
   return directory;
}



public String getJob(String job){
   String str = doCommand("/Users/abitterman/Development/APIs/book/API/job_status.sh "+job+"");
   System.out.println(str+"<br />");
   String jobstate = "";
   String percentcomplete = "";
   try {
      if (str != "") {
         JSONParser parser = new JSONParser();
         JSONObject jsonObject = (JSONObject) parser.parse(str);
         jobstate = (String) jsonObject.get("JobState");
         percentcomplete = (String) jsonObject.get("PercentComplete");
         System.out.println(jobstate+" "+percentcomplete);
      }
   } catch(Exception e) {
      System.out.println("ERROR: "+e.getMessage());
   }
   String result = "[ \""+jobstate+"\", \""+percentcomplete+"\" ]";
   return result;
}


public boolean isJSONValid(String test) {
    try {
        JSONParser parser = new JSONParser();
        JSONObject obj = (JSONObject) parser.parse(test);
    } catch (Exception ex) {
        // e.g. in case JSONArray is valid as well...
        try {
        JSONParser parser1 = new JSONParser();
         JSONArray arr = (JSONArray) parser1.parse(test);
        } catch (Exception ex1) {
            return false;
        }
    }
    return true;
}

/**
 * Sample usage:
 * <pre>
 * Writer writer = new JSONWriter(); // this writer adds indentation
 * jsonobject.writeJSONString(writer);
 * System.out.println(writer.toString());
 * </pre>
 * 
 * @author Elad Tabak
 * @author Maciej Komosinski, minor improvements, 2015
 * @since 28-Nov-2011
 * @version 0.2
 */
public class JSONWriter extends StringWriter
{
	final static String indentstring = "  "; //define as you wish
	final static String spaceaftercolon = " "; //use "" if you don't want space after colon

	private int indentlevel = 0;

	@Override
	public void write(int c)
	{
		char ch = (char) c;
		if (ch == '[' || ch == '{')
		{
			super.write(c);
			super.write('\n');
			indentlevel++;
			writeIndentation();
		} else if (ch == ',')
		{
			super.write(c);
			super.write('\n');
			writeIndentation();
		} else if (ch == ']' || ch == '}')
		{
			super.write('\n');
			indentlevel--;
			writeIndentation();
			super.write(c);
		} else if (ch == ':')
		{
			super.write(c);
			super.write(spaceaftercolon);
		} else
		{
			super.write(c);
		}

	}

	private void writeIndentation()
	{
		for (int i = 0; i < indentlevel; i++)
		{
			super.write(indentstring);
		}
	}
}


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/self_classes.jsp", Long.valueOf(1527219588000L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"       \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');

String sessionid = "";
if (request.getParameter("sessionid") == null) {
   //session.invalidate();
   sessionid = UUID.randomUUID().toString();
} else {
   sessionid = (String) request.getParameter("sessionid");
}

//
// Defaults ...
//
String newVDB = "VBITT";
String mountPath = "/mnt/provision";
String delphixGroup = "Oracle_Target";
String envName = "Linux Host";
String envInstance = "/u01/app/oracle/product/11.2.0.4/db_1";
String configTpl = "200M";
String archLog = "false";
/*
String newVDB = "mssql1";
String mountPath = "";
String delphixGroup = "Windows_Target";
String envName = "Window Target";
String envInstance = "MSSQLSERVER";
String configTemplate = "";
String archiveLog = "";
*/

//
// No changes required below here ...
//
if (session.getAttribute("vname") == null) { session.setAttribute("vname",newVDB); }
if (session.getAttribute("mntPath") == null) {  session.setAttribute("mntPath",mountPath); }
if (session.getAttribute("dpxGrp") == null) { session.setAttribute("dpxGrp",delphixGroup); }
if (session.getAttribute("envNm") == null) { session.setAttribute("envNm",envName); }
if (session.getAttribute("envInst") == null) { session.setAttribute("envInst",envInstance); }
if (session.getAttribute("configTemplate") == null) { session.setAttribute("configTemplate",configTpl); }
if (session.getAttribute("archiveLog") == null) { session.setAttribute("archiveLog",archLog); }


newVDB = (String)session.getAttribute("vname");
mountPath = (String)session.getAttribute("mntPath");
delphixGroup = (String)session.getAttribute("dpxGrp");
envName = (String)session.getAttribute("envNm");
envInstance = (String)session.getAttribute("envInst");
configTpl = (String)session.getAttribute("configTemplate");
archLog = (String)session.getAttribute("archiveLog");

   //PrintWriter requestOutput=response.getWriter();

   String path = application.getRealPath("/").replace('\\', '/');
   String lchar = path.substring(path.length() - 1); 
   if ( ! lchar.equals("/") ) {
      path = path + "/";
   }
   // ... or ... path = getServletContext().getRealPath("/").replace('\\', '/');
   //out.println("Path "+path+"<br />");

   String jsonpath = path+"jsonfiles"+File.separator;
   String jsonFile = "delphix_platforms.json";

   //
   // Page Banner ...
   //
   String ban = "<center><table border=0 style=\"background-color:black;width:100%;\">\n";
   ban = ban + "<tr><td style=\"padding-left:100px;\" width=\"30%\" align=\"center\" valign=\"top\"><a href=\"index.jsp?sessionid="+sessionid+"\"><image src=\"img/delphix-logo-white.png\" border=0 /></a></td>\n";
//   ban = ban + "<td align=\"center\" width=\"140\" valign=\"middle\">Delphix Rocks</td>\n";
   ban = ban + "<td align=\"left\" valign=\"bottom\"><span style=\"padding-left:10px;font-size:14pt;\"><font color=\"#1AD6F5\">API Demo Application</font></span></td>\n";
   ban = ban + "</tr>\n";
//msg = "Hello <b>"+usr+"</b>!";
   //if (msg != null) {
   //  ban = ban + "<tr style=\"background-color:white;width:100%;\"><td align=\"right\" style=\"color:blue;\"><i>:System Message:</i></td><td colspan=2>"+msg+"</td></tr>\n";
   //}
   ban = ban + "</table></center>\n";

   //
   // Application Variables ...
   //
   String str = "";

   String enginename = "";
   String enginetype = "";
   String protocol = "";
   String hostname = "";
   String username = "";
   String userpwd = "";
   String baseurl = "";
   String dlpxtype = "";
   String parent = "";

   String engine = "";
   engine = (request.getParameter("engine") != null) ? request.getParameter("engine") : "";

   String dbname = "";
   dbname = (request.getParameter("dbname") != null) ? request.getParameter("dbname") : "";
 
   String action = "";
   action = (request.getParameter("action") != null) ? request.getParameter("action") : "";

   // 
   // Report Title dbname and action ...
   //
   String rpt_title = "<span style=\"font-family:Arial,sans-serif; font-size:18px; font-weight:bold;\"> dSource or VDB <font color=blue><b>"+dbname+"</b></font> ... Action  <font color=blue><b>"+action+"</b></font></span>";

   String enabled = "";
   String runtimestatus = "";

   String job = "";

   String jobstate = "";
   String percentcomplete = "";

   String jobcolor = "lightyellow";
   String bgcolor = "lightyellow";

   /////////////////////////////////////////////////////////////
   // Let the fun begin ...
 
   //
   // Method Test ...
   //
   //out.println( doCommand("pwd") );
   //out.println("<hr />");

   //
   // JSON Parser ...
   //
   JSONParser parser = new JSONParser();
   boolean isValid;

   ////////////////////////////////////////////////////////////
   // HTML Output ...


      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<title>Delphix Rocks</title>\n");
      out.write("<style>\n");
      out.write("table { border-collapse: collapse; width: 350px; }\n");
      out.write("table, th, td { text-align:center; padding:2px; border:1px ridge black; }\n");
      out.write("</style>\n");
      out.write("<style>\n");
      out.write(".accordion {\n");
      out.write("    background-color: #eee;\n");
      out.write("    color: #444;\n");
      out.write("    cursor: pointer;\n");
      out.write("    padding: 2px;\n");
      out.write("    width: 100%;\n");
      out.write("    border: none;\n");
      out.write("    text-align: left;\n");
      out.write("    outline: none;\n");
      out.write("    font-size: 15px;\n");
      out.write("    transition: 0.4s;\n");
      out.write("}\n");
      out.write(".active, .accordion:hover {\n");
      out.write("    background-color: #ccc; \n");
      out.write("}\n");
      out.write(".panel {\n");
      out.write("    padding: 0 18px;\n");
      out.write("    display: none;\n");
      out.write("    background-color: white;\n");
      out.write("    overflow: hidden;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("<link href=\"./bootstrap/css/bootstrap1.min.css\" rel=\"stylesheet\" media=\"screen\"/>\n");
      out.write("<link href=\"./css/demoapp.css\" rel=\"stylesheet\" media=\"screen\"/>\n");
      out.write("<link href=\"./bootstrap/css/bootstrap-responsive.min.css\" rel=\"stylesheet\" media=\"screen\"/>\n");
      out.write("<script>\n");
      out.write("function f_open() {\n");
      out.write("   var win = window.open('provision.jsp', 'authWindow','toolbar=yes,scrollbars=yes,resizable=yes,top=100,left=200,width=640,height=480')\n");
      out.write("} \n");
      out.write("var newVDB = \"VBITT2\";\n");
      out.write("var mountPath = \"/mnt/provision\";\n");
      out.write("var delphixGroup = \"Oracle_Target\";\n");
      out.write("var envName = \"Linux Host\";\n");
      out.write("var envInstance = \"/u01/app/oracle/product/11.2.0.4/db_1\";\n");
      out.write("var configTemplate = \"200M\";\n");
      out.write("var archiveLog = \"false\";\n");
      out.write("function HandlePopupResult(vname,mntPath,dpxGrp,envNm,envInst) {\n");
      out.write("    //alert(\"result of popup is: \" + result);\n");
      out.write("    newVDB=vname;\n");
      out.write("    mountPath=mntPath;\n");
      out.write("    delphixGroup=dpxGrp;\n");
      out.write("    envName=envNm;\n");
      out.write("    envInstance=envInst;\n");
      out.write("    configTemplate;\n");
      out.write("    archiveLog;\n");
      out.write("    //alert (\"Handler: \" + newVDB);\n");
      out.write("}\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body bgcolor=\"white\"; border=\"3px\">\n");
      out.write("<center>\n");
      out.print(ban);
      out.write("\n");
      out.write("\n");
      out.write("<form name=\"form0\" method=\"post\" action=\"\">\n");
      out.write("<input type=\"hidden\" name=\"sessionid\" value=\"");
      out.print(sessionid);
      out.write("\" />\n");
      out.write("\n");

if (engine.equals("")) {

      out.write("\n");
      out.write("<fieldset>\n");
      out.write("<legend>Platforms</legend>\n");
      out.write("\n");
      out.write("Select Delphix Platform: \n");
      out.write("<select name=\"engine\" onchange=\"this.form.submit()\">\n");
      out.write("<option value=\"\"></option>\n");

   //
   // Engines ...
   //
   str = doCommand("cat "+jsonpath+jsonFile);
   out.println(str);

   isValid = isJSONValid(str);
   if (isValid) {
      Object obj = parser.parse(str);
      JSONObject jsonObject = (JSONObject) obj;
      JSONArray jarr = (JSONArray) jsonObject.get("engines");
      for (int i=0; i < jarr.size(); i++) {
         JSONObject pobj = (JSONObject) jarr.get(i);
         // out.println(i);
         // Long id = (Long) pobj.get("employee_id");
         enginename = (String) pobj.get("enginename");
         enginetype = (String) pobj.get("enginetype");
         if (enginetype.equals("Virtualization")) {
            if ( engine.equals(enginename) ) {
               protocol = (String) pobj.get("protocol");
               hostname = (String) pobj.get("hostname");
               username = (String) pobj.get("username");
               userpwd = (String) pobj.get("password");
               baseurl = protocol + "://" + hostname + "/resources/json/delphix";
               //out.println("enginename: "+enginename+" baseurl: "+baseurl+"<br />");

      out.write("\n");
      out.write("   <option value=\"");
      out.print(enginename);
      out.write("\" selected>");
      out.print(enginename);
      out.write("</option>\n");

            } else { 

      out.write("\n");
      out.write("   <option value=\"");
      out.print(enginename);
      out.write('"');
      out.write('>');
      out.print(enginename);
      out.write("</option>\n");

            }	// end if enginename ...
         } 	// end if enginetype ...
      }		// end for loop ...

   } else {
      out.println("Error: Invalid JSON String "+str+"<br />");
   }	// end if isValid ...
   //out.println("<hr />");

      out.write("\n");
      out.write("</select>\n");
      out.write("</fieldset>\n");
      out.write("</form>\n");
      out.write("\n");

}		// end if engine.equals ...
///out.println("Engine: "+engine+"<br />");

      out.write("\n");
      out.write("\n");
      out.write("<form name=\"form1\" method=\"post\" action=\"\">\n");
      out.write("<input type=\"hidden\" name=\"engine\" value=\"");
      out.print(engine);
      out.write("\" />\n");

if ( ! engine.equals("") ) {

      out.write("\n");
      out.write("\n");
      out.write("<fieldset>\n");
      out.write("<legend>Databases</legend>\n");

   //
   // Databases ...
   //
   str = doCommand(path+"api/get_databases_tc.sh \""+jsonpath+jsonFile+"\" \""+engine+"\"");
   //out.println(str);

/*
   JSONObject jobj = (JSONObject) parser.parse(str);
   JSONArray jarr1 = (JSONArray) jobj.get("result");
out.println("len: "+jarr1.size()+"<br />");
for (int i = 0; i < jarr1.size(); ++i) {
   JSONObject rec = (JSONObject) jarr1.get(i);
   String zdbname = (String) rec.get("name");
   //int id = rec.getInt("id");
   // ...
}   
*/

String strdb = str;
//str="[\"orcl\",\"VBITT\"]";
      //JSONArray jarr1 = (JSONArray) parser.parse(str);


      out.write("\n");
      out.write("Select dSource or VDB: <select name=\"dbname\" onchange=\"this.form.submit()\">\n");
      out.write("<option value=\"\"></option>\n");

   isValid = isJSONValid(str);
   if (isValid) {
      JSONObject jobj = (JSONObject) parser.parse(str);
      JSONArray jarr1 = (JSONArray) jobj.get("result");
      for (int i=0; i < jarr1.size(); i++) {
         JSONObject rec = (JSONObject) jarr1.get(i);
         String zdbname = (String) rec.get("name");
         //out.println(dbname); 
         if (dbname.equals(zdbname)) {
            dlpxtype = (String) rec.get("type");
            parent = (String) rec.get("provisionContainer"); 
            out.println("type: "+dlpxtype+"  parent: "+parent+"<br />");

      out.write("\n");
      out.write("         <option value=\"");
      out.print(zdbname);
      out.write("\" selected>");
      out.print(zdbname);
      out.write("</option> \n");
      
         } else {

      out.write("    \n");
      out.write("         <option value=\"");
      out.print(zdbname);
      out.write('"');
      out.write('>');
      out.print(zdbname);
      out.write("</option>  \n");

         } 	// end if dbname ...
      }		// end of for ...

   } else {
      out.println("Error: Invalid JSON String "+str+"<br />");
   } 	// end if isValid ...

      out.write("\n");
      out.write("</select>\n");
      out.write("\n");
      out.write("<br />\n");
      out.write("<span class=\"accordion\"><font color=grey>Expand/Collapse Databases Info</font></span>\n");
      out.write("<div class=\"panel\" style=\"text-align:left;\">\n");
      out.write("<pre>");
      out.print(strdb);
      out.write("</pre>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("</fieldset>\n");
      out.write("</form>\n");
      out.write("<br />\n");
      out.write("\n");
      out.write("<form name=\"form2\" method=\"post\" action=\"\">\n");
      out.write("<input type=\"hidden\" name=\"engine\" value=\"");
      out.print(engine);
      out.write("\" />\n");
      out.write("<input type=\"hidden\" name=\"dbname\" value=\"");
      out.print(dbname);
      out.write("\" />\n");
      out.write("\n");

if ( ! dbname.equals("") ) {

      out.write("\n");
      out.write("\n");
      out.write("<fieldset>\n");
      out.write("<legend>Init and Operations</legend>\n");
      out.write("\n");
      out.write("<input type=\"radio\" name=\"action\" value=\"status\" ");
 if (action.equals("status")) { out.println("checked"); } 
      out.write(" /> \n");
      out.write("status &nbsp;<font color=grey>|</font>&nbsp;\n");
      out.write("\n");

if ( parent != null) { 

      out.write("\n");
      out.write("<input type=\"radio\" name=\"action\" value=\"start\" ");
 if (action.equals("start")) { out.println("checked"); } 
      out.write(" /> \n");
      out.write("start &nbsp;<font color=grey>|</font>&nbsp;\n");
      out.write("\n");
      out.write("<input type=\"radio\" name=\"action\" value=\"stop\" ");
 if (action.equals("stop")) { out.println("checked"); } 
      out.write(" /> \n");
      out.write("stop &nbsp;<font color=grey>|</font>&nbsp;\n");

}

      out.write("\n");
      out.write("<input type=\"radio\" name=\"action\" value=\"enable\" ");
 if (action.equals("enable")) { out.println("checked"); } 
      out.write(" /> \n");
      out.write("enable &nbsp;<font color=grey>|</font>&nbsp;\n");
      out.write("\n");
      out.write("<input type=\"radio\" name=\"action\" value=\"disable\" ");
 if (action.equals("disable")) { out.println("checked"); } 
      out.write(" /> \n");
      out.write("disable &nbsp;<font color=grey>|</font>&nbsp;\n");
      out.write("\n");
      out.write("<input type=\"radio\" name=\"action\" value=\"delete\" ");
 if (action.equals("delete")) { out.println("checked"); } 
      out.write(" /> \n");
      out.write("delete &nbsp;&nbsp;&nbsp;<font color=grey>||</font>&nbsp;&nbsp;&nbsp;\n");
      out.write("\n");
      out.write("<!--- /fieldset> <br /> <fieldset> <legend>Operations</legend --->\n");

if ( dlpxtype.equals("MSSqlDatabaseContainer") && parent == null ) {
   // MSSqlExistingMostRecentBackupSyncParameters

      out.write("\n");
      out.write("<input type=\"radio\" onclick=\"alert('Only Supports MSSqlExistingMostRecentBackupSyncParameters');\" name=\"action\" value=\"sync\" ");
 if (action.equals("sync")) { out.println("checked"); } 
      out.write(" /> \n");

} else {

      out.write("\n");
      out.write("<input type=\"radio\" name=\"action\" value=\"sync\" ");
 if (action.equals("sync")) { out.println("checked"); } 
      out.write(" />\n");

}

      out.write("\n");
      out.write("sync \n");
      out.write("\n");

if ( parent != null) {          

      out.write("\n");
      out.write(" &nbsp;<font color=grey>|</font>&nbsp;\n");
      out.write("<input type=\"radio\" name=\"action\" value=\"rollback\" ");
 if (action.equals("rollback")) { out.println("checked"); } 
      out.write(" /> \n");
      out.write("rollback &nbsp;<font color=grey>|</font>&nbsp;\n");
      out.write("\n");
      out.write("<input type=\"radio\" name=\"action\" value=\"refresh\" ");
 if (action.equals("refresh")) { out.println("checked"); } 
      out.write(" /> \n");
      out.write("refresh  \n");

}

//out.println("type: "+dlpxtype+" ");
if ( dlpxtype.equals("OracleDatabaseContainer") || dlpxtype.equals("MSSqlDatabaseContainer") ) {

      out.write("\n");
      out.write(" &nbsp;<font color=grey>|</font>&nbsp;\n");
      out.write("<input onclick=\"f_open()\" type=\"radio\" name=\"action\" value=\"provision\" ");
 if (action.equals("provision")) { out.println("checked"); } 
      out.write(" />\n");
      out.write("provision\n");

}

      out.write("\n");
      out.write("\n");
      out.write("</fieldset>\n");
      out.write("<br />\n");
      out.write("\n");
      out.write("<input type=\"submit\" name=\"submit\" value=\"Submit\" onclick=\"return confirm('Confirm --- '+ document.querySelector('input[name=action]:checked').value+' --- Request?')\" />\n");
      out.write("\n");
      out.write("<br />\n");
      out.write("<font size=-1><font color=blue>Note: Jobs take a few moments to start after being submitted.</font></font>\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("<hr color=teal size=2 />\n");
      out.write("\n");

// 
// Process Request ...
//
if ( ! dbname.equals("") && ! action.equals("") ) {

   if ( ! action.equals("sync") && ! action.equals("rollback") && ! action.equals("refresh") && ! action.equals("provision") ) {
      // 
      // VDB Init ...
      //
      str = doCommand(path+"api/vdb_init_tc.sh \""+jsonpath+jsonFile+"\" \""+engine+"\" "+action+" \""+dbname+"\"");
      out.println(str+"<br />");
      isValid = isJSONValid(str);
      if (isValid) {
         // 
         // Status ...
         //
         if ( action.equals("status") ) {
            JSONObject jsonObj1 = (JSONObject) parser.parse(str);
            if ( (String) jsonObj1.get("Enabled") != null && (String) jsonObj1.get("RuntimeStatus") != null ) {
               enabled = (String) jsonObj1.get("Enabled");
               runtimestatus = (String) jsonObj1.get("RuntimeStatus");
            } else {
               out.println("Error: Missing Keys in JSON String "+str+"<br />");
               enabled = "missing key";
               runtimestatus = "missing key";
            }
            //out.println(enabled + " " + runtimestatus);
            //out.println("<hr />");
            String encolor = "lightyellow";
            String runcolor = "lightyellow";
            if ( enabled.equals("DISABLED")) { encolor="lightpink"; }
            if ( enabled.equals("ENABLED")) { encolor="lightgreen"; }
            if ( runtimestatus.equals("INACTIVE")) { runcolor="lightpink"; }
            if ( runtimestatus.equals("RUNNING")) { runcolor="lightgreen"; }

      out.write('\n');
      out.write('\n');
      out.print(rpt_title);
      out.write("\n");
      out.write("\n");
      out.write("<table class=\"tid\">\n");
      out.write("<tr><th>Enabled</th><th>RuntimeStatus</th></tr>\n");
      out.write("<tr>\n");
      out.write("   <td style=\"background-color:");
      out.print(encolor);
      out.write(';');
      out.write('"');
      out.write('>');
      out.print( enabled );
      out.write("</td>\n");
      out.write("   <td style=\"background-color:");
      out.print(runcolor);
      out.write(';');
      out.write('"');
      out.write('>');
      out.print( runtimestatus );
      out.write("</td>\n");
      out.write("</tr>\n");
      out.write("</table>\n");


         } else {

            // 
            // All other init commands ...
            //
            JSONObject jsonObj1 = (JSONObject) parser.parse(str);
            if ( (String) jsonObj1.get("job") != null ) {
               job = (String) jsonObj1.get("job");
            } else { 
               out.println("Error: Missing Job Key "+str+"<br />");
               job = "";
            }
            //out.println(job);
            //out.println("<hr />");
         } 	// end if action ...

      } else {
         out.println("Error: Invalid JSON String "+str+"<br />");
      }   	// end if isValid ...

   } else { 

      // 
      // VDB Operations ...
      //
      // Provision ...
      //
      if ( action.equals("provision")) {
 
/*
         out.println("provision "+dbname+" comming soon ...<br />");
         out.println("1 "+newVDB+"<br />");
         out.println("2 "+mountPath+"<br />");
         out.println("3 "+delphixGroup+"<br />");
         out.println("4 "+envName+"<br />");
         out.println("5 "+envInstance+"<br />");
         out.println("6 "+configTpl+"<br />");
         out.println("7 "+archLog+"<br />");

/Users/abitterman/tomcat/webapps/demoapp/api/provision_sqlserver_tc.sh "/Users/abitterman/tomcat/webapps/demoapp/jsonfiles/delphix_platforms.json" "Mac" "delphix_demo" "Vdelphix_demo" "Windows_Target" "Windows Host" "MSSQLSERVER"

*/
         String cmd = "";
         if ( dlpxtype.equals("OracleDatabaseContainer") ) {
            cmd = path+"api/provision_oracle_tc.sh \""+jsonpath+jsonFile+"\" \""+engine+"\" \""+dbname+"\" \""+newVDB+"\" \""+delphixGroup+"\" \""+envName+"\" \""+envInstance+"\" \""+mountPath+"\" \""+configTpl+"\" \""+archLog+"\"";
         }
         if ( dlpxtype.equals("MSSqlDatabaseContainer") ) {
            cmd = path+"api/provision_sqlserver_tc.sh \""+jsonpath+jsonFile+"\" \""+engine+"\" \""+dbname+"\" \""+newVDB+"\" \""+delphixGroup+"\" \""+envName+"\" \""+envInstance+"\"";
         }
         //out.println("cmd: "+cmd+"<br />");

         if ( dlpxtype.equals("OracleDatabaseContainer") || dlpxtype.equals("MSSqlDatabaseContainer") ) {
            str = doCommand(cmd);
            //out.println(str+"<br />");
            isValid = isJSONValid(str);
            if (isValid) {
               JSONObject jsonObj2 = (JSONObject) parser.parse(str);
               if ( (String) jsonObj2.get("job") != null ) {
                  job = (String) jsonObj2.get("job");
               } else {
                  out.println("Error: Missing Job Key "+str+"<br />");
                  job = "";
               }
               //out.println(job);
               //out.println("<hr />");
            } else {
               out.println ("Error: Invalid JSON String "+str+"<br />");
               job = "";
            }
         } else { 
            out.println ("Warning: Code for MS SQL Server or Oracle Provisioning ...<br />");
            job = "";
         }      // end if dlpxtype ...

      } else { 

         //
         // Sync, Rollback, Refresh ...
         // 
         String cmd = path+"api/vdb_operations_tc.sh \""+jsonpath+jsonFile+"\" \""+engine+"\" "+action+" \""+dbname+"\"";
         out.println("cmd: "+cmd+"<br />");
         str = doCommand(cmd);
         out.println(str+"<br />");
         isValid = isJSONValid(str);
         if (isValid) {
            JSONObject jsonObj2 = (JSONObject) parser.parse(str);
            if ( (String) jsonObj2.get("job") != null ) {
               job = (String) jsonObj2.get("job");
            } else {
               out.println("Error: Missing Job Key "+str+"<br />");
               job = "";
            }
            //out.println(job);
            //out.println("<hr />");
         } else { 
            out.println ("Error: Invalid JSON String "+str+"<br />");
         }
      } 	//end if provision ...

   }		// end if action ...

   // 
   // Job ...
   //
   if ( ! action.equals("status") ) {

      str = doCommand("sleep 1");

      //out.println(path+"api/job_status_tc.sh \""+jsonpath+jsonFile+"\" \""+engine+"\" "+job+"<br />");
      str = doCommand(path+"api/job_status_tc.sh \""+jsonpath+jsonFile+"\" \""+engine+"\" "+job+"");
      //out.println(str+"<br />");

      if ( job != "" ) {
         isValid = isJSONValid(str);
         if (isValid) {
            JSONObject jsonObj3 = (JSONObject) parser.parse(str);
            if ( (String) jsonObj3.get("JobState") != null && (String) jsonObj3.get("PercentComplete") != null ) {
               jobstate = (String) jsonObj3.get("JobState");
               percentcomplete = (String) jsonObj3.get("PercentComplete");
            } else {
               out.println("Error: Missing Job Key "+str+"<br />");
               jobstate = "missing"; 
               percentcomplete = "missing"; 
            }
            //out.println(jobstate+" "+percentcomplete);
            //out.println("<hr />");
         } else {
            out.println("Error: Invalid JSON String "+str+"<br />");
         }
      } else { 
         out.println("Error: Missing Job "+job+"<br />");
      }
      //str = getJob(job);
      //out.println("Job: "+str+"<br />");

      String urlengine = URLEncoder.encode(engine,"UTF-8");

      out.write("\n");
      out.write("<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>\n");
      out.write("<script>\n");
      out.write("   auto = setInterval(    function refresh() {\n");
      out.write("      //alert ('");
      out.print(job);
      out.write("');\n");
      out.write("      //alert ('");
      out.print(urlengine);
      out.write("');\n");
      out.write("      $(\"#result\").load(\"get_job.jsp?engine=");
      out.print(urlengine);
      out.write("&job=");
      out.print(job);
      out.write("\");\n");
      out.write("   }, 5000); // 10s  refresh every 5000 milliseconds\n");
      out.write("   refresh();\n");
      out.write("</script>\n");
      out.write("\n");
      out.print(rpt_title);
      out.write("\n");
      out.write("\n");
      out.write("<!-- This div is dynamically updated --> \n");
      out.write("<div id=\"result\">\n");
      out.write("<table class=\"tid\">\n");
      out.write("<tr><th>JobNo</th><th>Job State</th><th>% Complete</th></tr>\n");
      out.write("<tr>\n");
      out.write("   <td>");
      out.print( job );
      out.write("</td>\n");
      out.write("   <td id=jobstate style=\"background-color:");
      out.print(jobcolor);
      out.write('"');
      out.write('>');
      out.print( jobstate );
      out.write("</td>\n");
      out.write("   <td id=\"pc\" style=\"background-color:");
      out.print(bgcolor);
      out.write('"');
      out.write('>');
      out.print( percentcomplete );
      out.write("%</td>\n");
      out.write("</tr>\n");
      out.write("</table>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("// One Time Click Color Change ...\n");
      out.write("var color_count = 1;\n");
      out.write("function setColor(btn) {\n");
      out.write("   var property = document.getElementById(btn);\n");
      out.write("   if (color_count == 1) {\n");
      out.write("      property.style.backgroundColor = \"#FFBBBB\"\n");
      out.write("      property.innerHTML = \"Refreshing Stopped\"\n");
      out.write("      color_count = 0;\n");
      out.write("   }\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("<button id=\"button\" onclick=\"clearInterval(auto);setColor('button')\">Stop Updating Job Status</button>\n");
      out.write("\n");

			//alert ('Refresh Stop Done');
   } 		// end if ! status 
} 		// end if dbname and action ...


}       // end if dbname ...

      out.write("\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("var acc = document.getElementsByClassName(\"accordion\");\n");
      out.write("var i;\n");
      out.write("\n");
      out.write("for (i = 0; i < acc.length; i++) {\n");
      out.write("    acc[i].addEventListener(\"click\", function() {\n");
      out.write("        this.classList.toggle(\"active\");\n");
      out.write("        var panel = this.nextElementSibling;\n");
      out.write("        if (panel.style.display === \"block\") {\n");
      out.write("            panel.style.display = \"none\";\n");
      out.write("        } else {\n");
      out.write("            panel.style.display = \"block\";\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("\n");

} 	// end if engine ...

      out.write("\n");
      out.write("</center>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
