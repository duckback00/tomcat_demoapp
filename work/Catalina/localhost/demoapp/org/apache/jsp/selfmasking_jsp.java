/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.56
 * Generated at: 2020-03-24 15:29:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;
import javax.servlet.*;
import org.json.simple.*;
import org.json.simple.parser.*;
import java.net.*;
import java.io.*;
import java.util.*;
import java.net.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;

public final class selfmasking_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


// 
// Just run local shell commands for now ... 
// FUTURE: Convert to API calls directly to Engine 
//
public String doCommand(String cmd){
   String directory = "";
   try {
      int exitCode;
      // out.println("Setting Shell Environment ...");
      String [] params = new String[]{"/bin/bash", "-c", "cd "+System.getProperty("user.home")+";. ./.delphix_profile 1> /dev/null;set -e;" + cmd };
      //String [] params = new String[]{"/bin/bash", "-c", "cd "+System.getProperty("user.home")+";. ./.delphix_profile 1> /dev/null;set -e;" + ""+request.getParameter("dir")};
      int c;
      BufferedReader b;
      // System.out.println("Parameters ..."+params);
      Process subProc = Runtime.getRuntime().exec(params);
      StringBuffer sb = new StringBuffer();
      // System.out.println("Opening Buffer for Reading ...");
      b = new BufferedReader(new InputStreamReader(subProc.getInputStream()));
      c = b.read();
      while (c != -1) {
        sb.append((char)c);
        c = b.read();
      }
      b.close();
      // System.out.println("Buffer Closed ...");
      exitCode = subProc.waitFor();
      if (exitCode != 0) {
        sb = new StringBuffer();
        b = new BufferedReader(new InputStreamReader(subProc.getErrorStream()));
        c = b.read();
        while (c != -1) {
           sb.append((char)c);
           c = b.read();
        }    //end while
        b.close();
        System.out.println("ERROR: Output from 'doCommand' "+ sb.toString());
      } else {
         //System.out.println("Output from 'doCommand' "+ sb.toString());
         directory =  sb.toString().trim();
      }
   } catch(Exception e) {
      System.out.println("ERROR: "+e.getMessage());
   }
   return directory;
}



public String getJob(String job){
   String str = doCommand("/Users/abitterman/Development/APIs/book/API/job_status.sh "+job+"");
   System.out.println(str+"<br />");
   String jobstate = "";
   String percentcomplete = "";
   try {
      if (str != "") {
         JSONParser parser = new JSONParser();
         JSONObject jsonObject = (JSONObject) parser.parse(str);
         jobstate = (String) jsonObject.get("JobState");
         percentcomplete = (String) jsonObject.get("PercentComplete");
         System.out.println(jobstate+" "+percentcomplete);
      }
   } catch(Exception e) {
      System.out.println("ERROR: "+e.getMessage());
   }
   String result = "[ \""+jobstate+"\", \""+percentcomplete+"\" ]";
   return result;
}


public boolean isJSONValid(String test) {
    try {
        JSONParser parser = new JSONParser();
        JSONObject obj = (JSONObject) parser.parse(test);
    } catch (Exception ex) {
        // e.g. in case JSONArray is valid as well...
        try {
        JSONParser parser1 = new JSONParser();
         JSONArray arr = (JSONArray) parser1.parse(test);
        } catch (Exception ex1) {
            return false;
        }
    }
    return true;
}

/**
 * Sample usage:
 * <pre>
 * Writer writer = new JSONWriter(); // this writer adds indentation
 * jsonobject.writeJSONString(writer);
 * System.out.println(writer.toString());
 * </pre>
 * 
 * @author Elad Tabak
 * @author Maciej Komosinski, minor improvements, 2015
 * @since 28-Nov-2011
 * @version 0.2
 */
public class JSONWriter extends StringWriter
{
	final static String indentstring = "  "; //define as you wish
	final static String spaceaftercolon = " "; //use "" if you don't want space after colon

	private int indentlevel = 0;

	@Override
	public void write(int c)
	{
		char ch = (char) c;
		if (ch == '[' || ch == '{')
		{
			super.write(c);
			super.write('\n');
			indentlevel++;
			writeIndentation();
		} else if (ch == ',')
		{
			super.write(c);
			super.write('\n');
			writeIndentation();
		} else if (ch == ']' || ch == '}')
		{
			super.write('\n');
			indentlevel--;
			writeIndentation();
			super.write(c);
		} else if (ch == ':')
		{
			super.write(c);
			super.write(spaceaftercolon);
		} else
		{
			super.write(c);
		}

	}

	private void writeIndentation()
	{
		for (int i = 0; i < indentlevel; i++)
		{
			super.write(indentstring);
		}
	}
}


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/read_one.jsp", Long.valueOf(1527219588000L));
    _jspx_dependants.put("/self_classes.jsp", Long.valueOf(1527219588000L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

String sessionid = "";
if (request.getParameter("sessionid") == null) {
   //session.invalidate();
   sessionid = UUID.randomUUID().toString();
} else {
   sessionid = (String) request.getParameter("sessionid");
}

String sqlSchema = "";
String dboSchema = "";     	// required for SQL Server 
String url = "";
String username = "";
String password = "";
String connUrl = "";

String dbType = "";
if (request.getParameter("dbType") != null) {
   dbType = request.getParameter("dbType");
   session.setAttribute("dbType",dbType);
}

String dbSources = (request.getParameter("dbSources") != null) ? request.getParameter("dbSources") : "";

if (dbSources.equals("")) {
   dbSources="mssql_source,mssql_target,mssql_target2,oracle_source,oracle_target,oracle_target2";
}

String dataSource = (request.getParameter("dataSource") != null) ? request.getParameter("dataSource") : "";

if ( ! dataSource.equals("") && dbType.equals("") ) {
   String[] dtarr = dataSource.split("_");
   dbType = dtarr[0].toLowerCase();
   session.setAttribute("dbType",dbType);
}

String profileSet = (request.getParameter("profileSet") != null) ? request.getParameter("profileSet") : "";

String submit = (request.getParameter("submit") != null) ? request.getParameter("submit") : "";

/*
out.println("dbType: "+dbType+"<br />");
out.println("dbSources: "+dbSources+"<br />");
out.println("dataSource: "+dataSource+"<br />");
out.println("submit: "+submit+"<br />");
*/

// 
// ...
// 
if ( ! submit.equals("") && ! submit.equals("Login") ) {

if ( ! dataSource.equals("") ) {

      out.write('\n');
      out.write('\n');


//
// Read context.xml file ...
//

//String url = "";
//String username = ""; 
//String password = "";
String rstr = "";

//String dbType = "mongo";
//String dataSource = "mongo_target3";
//String sqlSchema = "";
//String connUrl = "";

try {

   //Integer counter;
   String name = "";
   String auth = ""; 
   String type = "";
   String driverClassName = "";
   String maxActive = "";
   String maxIdle = ""; 
   String validationQuery = ""; 
   String testOnBorrow = "";
   String maxWait = "";

   // 
   // Read XML file into Parse Doc ...
   //
   String XmlPath = "/META-INF/context.xml";
   Document doc;
   String appPath = application.getRealPath("/");
   DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
   DocumentBuilder db=dbf.newDocumentBuilder();
   doc=db.parse(appPath + XmlPath);

   //
   // Get all Resource Tags ...
   //
   NodeList nl = doc.getElementsByTagName("Resource");

   // 
   // Loop thru each Resource element ...
   //
   Element el;
   for (int i = 0; i < nl.getLength(); i++) {
      el = (org.w3c.dom.Element) nl.item(i);

      //
      // Get Element Attributes ...
      //
      //counter = Integer.valueOf(el.getAttribute("counter"));
      name = el.getAttribute("name");
      String[] dsarr = name.split("/");

      //if (name.equals("jdbc/mongo_source")) {
      if (dataSource.equals(dsarr[1])) {

         auth = el.getAttribute("auth");
         type = el.getAttribute("type");
         driverClassName = el.getAttribute("driverClassName");
         url = el.getAttribute("url");
         username = el.getAttribute("username");
         password = el.getAttribute("password");
         maxActive = el.getAttribute("maxActive");
         maxIdle = el.getAttribute("maxIdle");
         validationQuery = el.getAttribute("validationQuery");
         testOnBorrow = el.getAttribute("testOnBorrow");
         maxWait = el.getAttribute("maxWait");
         //out.println(i + ") name = " + name + " " + url + " " + username + "/" + password + "<br />");

         rstr = "    &lt;Resource name=\""+name+"\" auth=\""+auth+"\"\n          type=\""+type+"\" driverClassName=\""+driverClassName+"\"\n          url=\""+url+"\"\n          username=\""+username+"\" password=\""+password+"\" maxActive=\""+maxActive+"\" maxIdle=\""+maxIdle+"\" validationQuery=\""+validationQuery+"\"\n          testOnBorrow=\""+testOnBorrow+"\" maxWait=\""+maxWait+"\"/&gt;\n";

          //out.println("<pre>"+rstr+"</pre>");

      } 

   }    // end of loop 	

} catch(Exception e) {
   out.println(e.getMessage()); 
}

//out.println(""+rstr+"<br />");

//out.println(""+url+" : "+username+" : "+password+"<br />");

//
// Mongo requires a different JDBC Connect String ...
//
if (dbType.equals("mongo")) {
   //      0       1        2               3
   //jdbc:mongodb://172.16.160.133:27017/delphixdb
   String[] arr = url.split("/");
   //out.println("parts[2]: "+arr[2]+"<br />");
   //out.println("parts[3]: "+arr[3]+"<br />");

   if (arr != null && 2 >= 0 && 2 < arr.length && arr[2] != null) {
      // arr[i] exists and is not null
      //connUrl = "mongodb://"+arr[2];
      connUrl = "mongodb://"+username+":"+password+"@"+arr[2]+"/"+arr[3]+"";
   } else {
      connUrl = "missing";
   }
   if (arr != null && 3 >= 0 && 3 < arr.length && arr[3] != null) {
      // arr[i] exists and is not null
      sqlSchema = arr[3];
   } else {
      sqlSchema = "missing";
   }
} else if (dbType.equals("oracle")) {
   //         0                1              		// arr
   //                           0          1		// arr1
   //                                   0     1		// arr2
   // jdbc:oracle:thin:@172.16.160.133:1521/orcl 
   String[] arr = url.split("@");
   if (arr != null && arr[1] != null) {
      String[] arr1 = arr[1].split(":");
      String[] arr2 = arr1[1].split("/");
      connUrl = url;  // "xxxxxx://"+username+":"+password+"@"+arr2[0]+"/"+arr2[1]+"";
      sqlSchema = arr2[1];
   } else {
      connUrl = "missing";
      sqlSchema = "missing";
   }
} else if (dbType.equals("mssql")) {
   // url: jdbc:sqlserver://172.16.160.134:1433;DatabaseName=delphix_demo;Schema=dbo
   String[] arr3 = url.split(";");
   if (arr3 != null && arr3[1] != null) {
      String[] arr4 = arr3[1].split("=");
      sqlSchema = arr4[1];
   } else {
      sqlSchema = "";
   }
   if (arr3 != null && arr3[2] != null) {
      String[] arr5 = arr3[2].split("=");
      dboSchema = arr5[1];
   } else {
      dboSchema = "";
   } 
   connUrl = url;
} else {
   connUrl = url;
   sqlSchema = "";
}
//out.println("schema: "+dboSchema+"<br />");
//out.println("database: "+sqlSchema+"<br />");
//out.println("connUrl: "+connUrl+"<br />");


      out.write('\n');
      out.write('\n');

} else {
   out.println("Error: Missing dataSource "+dataSource+" ... <br />");
}

/*
   out.println("database: "+sqlSchema+"<br />");
   out.println("schema: "+dboSchema+"<br />");
   out.println("connUrl: "+connUrl+"<br />");
   out.println("username: "+username+"<br />");
   out.println("password: "+password+"<br />");
*/

   session.setAttribute("connUrl",connUrl);
   session.setAttribute("dboSchema",dboSchema);
   session.setAttribute("sqlSchema",sqlSchema);
   session.setAttribute("username",username);
   session.setAttribute("password",password);

   //username = (String)session.getAttribute("username");
   //password = (String)session.getAttribute("password");
   //connUrl = (String)session.getAttribute("connUrl");

} 

//
// Defaults ...
//

   //PrintWriter requestOutput=response.getWriter();

   String path = application.getRealPath("/").replace('\\', '/');
   String lchar = path.substring(path.length() - 1); 
   if ( ! lchar.equals("/") ) {
      path = path + "/";
   }
   // ... or ... path = getServletContext().getRealPath("/").replace('\\', '/');
   //out.println("Path "+path+"<br />");

   String jsonpath = path+"jsonfiles"+File.separator;
   String jsonFile = "delphix_platforms.json";

   //
   // Page Banner ...
   //
   String ban = "<center><table border=0 style=\"background-color:black;width:100%;\">\n";
   ban = ban + "<tr><td style=\"padding-left:150px;\" width=\"30%\" align=\"center\" valign=\"top\"><a href=\"index.jsp?sessionid="+sessionid+"\"><image src=\"img/delphix-logo-white.png\" border=0 /></a></td>\n";
//   ban = ban + "<td align=\"center\" width=\"140\" valign=\"middle\">Delphix Rocks</td>\n";
   ban = ban + "<td align=\"right\" valign=\"bottom\"><span style=\"padding-right:150px;font-size:18pt;\"><font color=\"#1AD6F5\">Masking API Demo</font></span></td>\n";
   ban = ban + "</tr>\n";
//msg = "Hello <b>"+usr+"</b>!";
   //if (msg != null) {
   //  ban = ban + "<tr style=\"background-color:white;width:100%;\"><td align=\"right\" style=\"color:blue;\"><i>:System Message:</i></td><td colspan=2>"+msg+"</td></tr>\n";
   //}
   ban = ban + "</table></center>\n";

   //
   // Application Variables ...
   //
   String str = "";

   String enginename = "";
   String enginetype = "";
   String protocol = "";
   String hostname = "";
   String usernam = "";
   String userpwd = "";
   String baseurl = "";
   String dlpxtype = "";
   String parent = "";

   String engine = "";
   engine = (request.getParameter("engine") != null) ? request.getParameter("engine") : "";

   String dbname = "";
   dbname = (request.getParameter("dbname") != null) ? request.getParameter("dbname") : "";
 
   String action = "";
   action = (request.getParameter("action") != null) ? request.getParameter("action") : "";

   String tables = "";
   tables = (request.getParameter("tbl") != null) ? request.getParameter("tbl") : "";

   // 
   // Report Title dbname and action ...
   //
   String rpt_title = "<span style=\"font-family:Arial,sans-serif; font-size:18px; font-weight:bold;\">Action  <font color=blue><b>"+action+"</b></font></span>";

   String enabled = "";
   String runtimestatus = "";

   String job = "";

   String jobstate = "";
   String startTime = ""; 
   String rowsMasked = "";
   String rowsTotal = "";
   String endTime = "";

   String jobcolor = "lightyellow";
   String bgcolor = "lightyellow";

   /////////////////////////////////////////////////////////////
   // Let the fun begin ...
 
   //
   // Method Test ...
   //
   //out.println( doCommand("pwd") );
   //out.println("<hr />");

   //
   // JSON Parser ...
   //
   JSONParser parser = new JSONParser();
   boolean isValid;

   ////////////////////////////////////////////////////////////
   // HTML Output ...


      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"       \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<title>Delphix Rocks</title>\n");
      out.write("<link href=\"./bootstrap/css/bootstrap1.min.css\" rel=\"stylesheet\" media=\"screen\"/>\n");
      out.write("<link href=\"./css/demoapp.css\" rel=\"stylesheet\" media=\"screen\"/>\n");
      out.write("<!-- link href=\"./bootstrap/css/bootstrap-responsive.min.css\" rel=\"stylesheet\" media=\"screen\"/ -->\n");
      out.write("<style>\n");
      out.write("table { border-collapse: collapse; width: 600px; }\n");
      out.write("table, th, td { padding-left:4px; padding-top:2px; padding-bottom:2px; border:1px ridge black; }\n");
      out.write("textarea { font-family: inherit; font-size: 10pt; }\n");
      out.write("</style>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("function isCheck() {\n");
      out.write("   if (document.querySelector('input[name=\"action\"]:checked') == null) {\n");
      out.write("      window.alert(\"You need to choose an Action option!\");\n");
      out.write("      return false;\n");
      out.write("   } else {\n");
      out.write("      return confirm('Confirm Run '+ document.querySelector('input[name=action]:checked').value+' Request?');\n");
      out.write("   }\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body bgcolor=\"white\"; border=\"3px\">\n");
      out.write("<center>\n");
      out.print(ban);
      out.write("\n");
      out.write("\n");
      out.write("<table>\n");
      out.write("\n");
      out.write("<form name=\"form0\" method=\"post\" action=\"\">\n");
      out.write("<input type=\"hidden\" name=\"sessionid\" value=\"");
      out.print(sessionid);
      out.write("\" />\n");
      out.write("<input type=\"hidden\" name=\"dbSources\" value=\"");
      out.print(dbSources);
      out.write("\" />\n");

if (! engine.equals("")) {
   out.println("<input type=\"hidden\" name=\"engine\" value=\""+engine+"\" />");
}

      out.write("\n");
      out.write("\n");
      out.write("<legend>Profiling and Masking Job</legend>\n");
      out.write("\n");
      out.write("<tr>\n");
      out.write("<td align=\"right\">Masking Platform: </td>\n");
      out.write("<td align=\"left\" style=\"padding-top:2px;padding-left:8px;\">\n");
      out.write("\n");

if ( engine.equals("") ) {

      out.write("\n");
      out.write("\n");
      out.write("<select name=\"engine\" onchange=\"this.form.submit()\">\n");
      out.write("<option value=\"\"></option>\n");
      out.write("\n");

}	// end if engine.equals ...

   //
   // Engines ...
   //
   str = doCommand("cat "+jsonpath+jsonFile);
   //out.println(str);

   isValid = isJSONValid(str);
   if (isValid) {
      Object obj = parser.parse(str);
      JSONObject jsonObject = (JSONObject) obj;
      JSONArray jarr = (JSONArray) jsonObject.get("engines");
      for (int i=0; i < jarr.size(); i++) {
         JSONObject pobj = (JSONObject) jarr.get(i);
         // out.println(i);
         // Long id = (Long) pobj.get("employee_id");
         enginename = (String) pobj.get("enginename");
         enginetype = (String) pobj.get("enginetype");
         if (enginetype.equals("Masking")) {
            if ( engine.equals(enginename) ) {
               protocol = (String) pobj.get("protocol");
               hostname = (String) pobj.get("hostname");
               usernam = (String) pobj.get("username");
               userpwd = (String) pobj.get("password");
               baseurl = protocol + "://" + hostname + "/resources/json/delphix";
               //out.println("enginename: "+enginename+" baseurl: "+baseurl+"<br />");
if (engine.equals("")) {

      out.write("\n");
      out.write("   <option value=\"");
      out.print(enginename);
      out.write("\" selected>");
      out.print(enginename);
      out.write("</option>\n");

} else {
   out.println(enginename);
}
            } else { 
if (engine.equals("")){

      out.write("\n");
      out.write("   <option value=\"");
      out.print(enginename);
      out.write('"');
      out.write('>');
      out.print(enginename);
      out.write("</option>\n");

}  	// end if engine.equals ...

            }	// end if enginename ...
         } 	// end if enginetype ...
      }		// end for loop ...

   } else {
      out.println("Error: Invalid JSON String "+str+"<br />");
   }	// end if isValid ...
   //out.println("<hr />");

if ( engine.equals("") ) {

      out.write("\n");
      out.write("</select>\n");

} 	// end if engine.equals ...

      out.write("\n");
      out.write("</td>\n");
      out.write("</tr>\n");
      out.write("\n");
      out.write("<!-- tr>\n");
      out.write("<td align=\"right\">Database: </td>\n");
      out.write("<td align=\"left\">");
      out.print(dbType );
      out.write("</td>\n");
      out.write("</tr -->\n");
      out.write("\n");
      out.write("<tr>\n");
      out.write("<td align=\"right\">Select dataSource: </td>\n");
      out.write("<td align=\"left\" style=\"padding-top:14px;padding-left:8px;\">\n");
      out.write("<select name=\"dataSource\">\n");

if (! dbSources.equals("")) {
   String[] dbarr = dbSources.split(",");
   for( int i = 0; i < dbarr.length; i++) {
      String s = dbarr[i];
      out.println("<option value="+s);
      if ( s.equals(dataSource) ) { out.println(" selected"); }
      out.println(">"+s+"</option>"); 
   }
}

      out.write("\n");
      out.write("</select>\n");
      out.write("</td>\n");
      out.write("</tr>\n");
      out.write("\n");
      out.write("<!-- tr>\n");
      out.write("<td align=\"right\">Connection URL: </td>\n");
      out.write("<td align=\"left\">");
      out.print(connUrl );
      out.write("</td>\n");
      out.write("</tr -->\n");
      out.write("\n");
      out.write("<!-- tr>\n");
      out.write("<td align=\"right\">Schema: </td>\n");
      out.write("<td align=\"left\">");
      out.print(sqlSchema );
      out.write("</td>\n");
      out.write("</tr -->\n");
      out.write("\n");
      out.write("<tr>\n");
      out.write("<td align=\"right\">Select Tables: </td>\n");
      out.write("<td align=\"left\" style=\"padding-top:14px;padding-left:8px;\">\n");
      out.write("<select name=\"tbl\">\n");

out.println("<option value=\"EMPLOYEES\"");
if ( tables.equals("EMPLOYEES")) { out.println(" selected"); }
out.println(">EMPLOYEES</option>");
out.println("<option value=\"MEDICAL_RECORDS,PATIENT,PATIENT_DETAILS\"");
if ( tables.equals("MEDICAL_RECORDS,PATIENT,PATIENT_DETAILS")) { out.println(" selected"); }
out.println(">MEDICAL</option>"); 

      out.write("\n");
      out.write("</select>\n");
      out.write("</td>\n");
      out.write("</tr>\n");
      out.write("\n");
      out.write("<tr>\n");
      out.write("<td align=\"right\">Select Profile Set: </td>\n");
      out.write("<td align=\"left\" style=\"padding-top:14px;padding-left:8px;\">\n");
      out.write("<select name=\"profileSet\">\n");

out.println("<option value=\"Financial\"");
if ( profileSet.equals("Financial")) { out.println(" selected"); }
out.println(">Financial</option>");
out.println("<option value=\"HIPAA\"");
if ( profileSet.equals("HIPAA")) { out.println(" selected"); }
out.println(">HIPAA</option>");

      out.write("\n");
      out.write("</select>\n");
      out.write("</td>\n");
      out.write("</tr>\n");
      out.write("\n");
      out.write("<tr>\n");
      out.write("<td align=\"right\">Action: </td>\n");
      out.write("<td align=\"left\" style=\"padding-top:2px;padding-left:8px;\"> \n");
      out.write("<input id=\"RadioBtn\" type=\"radio\" name=\"action\" value=\"Profile\" \n");

   if (action.equals("Profile")) { out.print(" checked"); }

      out.write("\n");
      out.write("/>\n");
      out.write("Profile Only \n");
      out.write("&nbsp;&nbsp;<font color=grey>|</font>&nbsp;&nbsp;\n");
      out.write("<input id=\"RadioBtn\" type=\"radio\" name=\"action\" value=\"ProfileMask\" \n");

   if (action.equals("ProfileMask")) { out.print(" checked"); }

      out.write("\n");
      out.write("/>\n");
      out.write("Profile and Mask \n");
      out.write("</td>\n");
      out.write("</tr>\n");
      out.write("\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("</fieldset>\n");
      out.write("\n");
      out.write("<br />\n");
      out.write("<input type=\"submit\" name=\"submit\" value=\"Submit\" onclick=\"return isCheck();\" />\n");
      out.write("<br />\n");
      out.write("<font size=-1><font color=blue>Note: Jobs take a few moments to start after being submitted.</font></font>\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("<hr color=teal size=2 />\n");
      out.write("\n");


// 
// Process Request ...
//
if ( ! engine.equals("") && ! action.equals("") ) {

   //out.println("Action: "+action+"<br />");

   // 
   // Build Masking Stuff ...
   //
/*

database: orcl
connUrl: jdbc:oracle:thin:@172.16.160.133:1521/orcl
username: delphixdb
password: delphixdb

profileSet
PSNAME="${#}"

tables
TBL="${#}"
*/

   String conn = "";
   if (dbType.equals("oracle")) { 
      String uarr[] = connUrl.split("@");
      String harr[] = uarr[1].split(":");
      String parr[] = harr[1].split("/");

      conn = "[{";
      conn = conn + "  \"username\": \""+username.toUpperCase()+"\",";
      conn = conn + "  \"password\": \""+password+"\",";
      conn = conn + "  \"databaseType\": \""+dbType.toUpperCase()+"\",";
      conn = conn + "  \"host\": \""+harr[0]+"\",";
      conn = conn + "  \"port\": "+parr[0]+",";
      conn = conn + "  \"schemaName\": \""+username.toUpperCase()+"\",";
      conn = conn + "  \"profileSetName\": \""+profileSet+"\",";
      conn = conn + "  \"connNo\": 1,";
      conn = conn + "  \"sid\": \""+sqlSchema+"\"";
      conn = conn + "}]";
   } 

   if (dbType.equals("mssql")) {
      String uarr[] = connUrl.split("//");
      String harr[] = uarr[1].split(":");
      String parr[] = harr[1].split(";");

      conn = "[{";
      conn = conn + "  \"username\": \""+username+"\",";
      conn = conn + "  \"password\": \""+password+"\",";
      conn = conn + "  \"databaseType\": \""+dbType.toUpperCase()+"\",";
      conn = conn + "  \"host\": \""+harr[0]+"\",";
      conn = conn + "  \"port\": "+parr[0]+",";
      if (dboSchema.equals("")) { 
         dboSchema = "dbo";		// default schema ..
      }
      conn = conn + "  \"schemaName\": \""+dboSchema+"\",";
      conn = conn + "  \"profileSetName\": \""+profileSet+"\",";
      conn = conn + "  \"connNo\": 1,";
      conn = conn + "  \"databaseName\": \""+sqlSchema+"\",";     // sid 
      conn = conn + "  \"instanceName\": \"\"";
      conn = conn + "}]";
   }
   //out.println("Conn: "+conn+"<br />");

   String connFile=jsonpath+sessionid+".json";

   out.println("<b>Results</b><br />");
   // out.println("<a href=\"jsonfiles/"+sessionid+".json\" target=\"_blank\">Connection File</a><br />");

   //
   // Write Out New configuration ...
   //
   try {
      FileWriter file = new FileWriter(connFile);
      file.write(conn);
      file.flush();
      file.close();
   } catch (Exception e) {
      e.printStackTrace();
   }       // end try ...

   //                                                1                   2             3               4               5
   String cmd = path+"api/masking_tc.sh \""+jsonpath+jsonFile+"\" \""+engine+"\" \""+action+"\" \""+connFile+"\" \""+tables+"\"";
   //out.println(cmd+" <br />");

   str = doCommand(cmd);
   //out.println(str+"<br />");

//
// Profile Only ...
//
if ( action.equals("Profile") ) {
   //out.println(str+"<br />");

   isValid = isJSONValid(str);
   if (isValid) {

      //
      // All other init commands ...
      //
      JSONObject jsonObj5 = (JSONObject) parser.parse(str);
      if ( (String) jsonObj5.get("profile_execution_results") != null ) {
         job = (String) jsonObj5.get("profile_execution_results");
      } else {
         out.println("Error: Missing Job Key "+str+"<br />");
         job = "";
      }
      //out.println(job);
      //out.println("<hr />");
      out.println("Profile Execution Results Status: "+job+"<br />");

   } else {
         out.println("Error: Invalid JSON String "+str+"<br />");
   }    // end if isValid ...


}

//
// Profile and Masking ...
//
if ( action.equals("ProfileMask") ) {

   isValid = isJSONValid(str);
   if (isValid) {

      // 
      // All other init commands ...
      //
      JSONObject jsonObj1 = (JSONObject) parser.parse(str);
      if ( (String) jsonObj1.get("masking_execution_id") != null ) {
         job = (String) jsonObj1.get("masking_execution_id");
      } else { 
         out.println("Error: Missing Job Key "+str+"<br />");
         job = "";
      }
      //out.println(job);
      //out.println("<hr />");

   } else {
         out.println("Error: Invalid JSON String "+str+"<br />");
   }   	// end if isValid ...

   //out.println ("Masking Execution Id: "+job+"<br />");

   // 
   // Job ...
   //

//,{"executionId":336,"jobId":302,"status":"SUCCEEDED","rowsMasked":10,"rowsTotal":10,"startTime":"2018-05-14T04:50:23.378+0000","endTime":"2018-05-14T04:50:54.407+0000"}

///Users/abitterman/tomcat/webapps/demoapp/api/masking_status_tc.sh "/Users/abitterman/tomcat/webapps/demoapp/jsonfiles/delphix_platforms.json" "Mac2" "336" YES

      str = doCommand(path+"api/masking_status_tc.sh \""+jsonpath+jsonFile+"\" \""+engine+"\" "+job+"");
      //out.println(str+"<br />");

      if ( job != "" ) {
         isValid = isJSONValid(str);
         if (isValid) {
            JSONObject jsonObj3 = (JSONObject) parser.parse(str);
            if ( (String) jsonObj3.get("status") != null ) {
               jobstate = (String) jsonObj3.get("status");
               startTime = (String) jsonObj3.get("startTime");
               rowsMasked = "0";
               rowsTotal = "0";
               endTime = "";
            } else {
               out.println("Error: Missing Job Key "+str+"<br />");
               jobstate = "missing"; 
            }
            //out.println(jobstate+"<br />");
            //out.println("<hr />");
         } else {
            out.println("Error: Invalid JSON String "+str+"<br />");
         }
      } else { 
         out.println("Error: Missing Job "+job+"<br />");
      }
      //str = getJob(job);
      //out.println("Job: "+str+"<br />");

      String urlengine = URLEncoder.encode(engine,"UTF-8");

      out.write("\n");
      out.write("<script src=\"js/jquery.min.js\"></script>\n");
      out.write("<script>\n");
      out.write("   auto = setInterval(    function refresh() {\n");
      out.write("      //alert ('");
      out.print(job);
      out.write("');\n");
      out.write("      $(\"#result\").load(\"masking_job.jsp?engine=");
      out.print(urlengine);
      out.write("&job=");
      out.print(job);
      out.write("\");\n");
      out.write("   }, 5000); // 10s  refresh every 5000 milliseconds\n");
      out.write("   refresh();\n");
      out.write("</script>\n");
      out.write("\n");
      out.print(rpt_title);
      out.write("\n");
      out.write("\n");
      out.write("<!-- This div is dynamically updated --> \n");
      out.write("<div id=\"result\">\n");
      out.write("<table class=\"tid\">\n");
      out.write("<tr>\n");
      out.write("<th>Exec<br />Id</th>\n");
      out.write("<th>Status</th>\n");
      out.write("<th>Row<br />Masked</th>\n");
      out.write("<th>Rows<br />Total</th>\n");
      out.write("<th>Start Time</th>\n");
      out.write("<th>End Time</th>\n");
      out.write("</tr>\n");
      out.write("\n");
      out.write("<tr>\n");
      out.write("<td>");
      out.print( job );
      out.write("</td>\n");
      out.write("<td id=jobstate style=\"background-color:");
      out.print(jobcolor);
      out.write('"');
      out.write('>');
      out.print(jobstate);
      out.write("</td>\n");
      out.write("<td>");
      out.print(rowsMasked);
      out.write("</td>\n");
      out.write("<td>");
      out.print(rowsTotal);
      out.write("</td>\n");
      out.write("<td>");
      out.print(startTime);
      out.write("</td>\n");
      out.write("<td>");
      out.print(endTime);
      out.write("</td>\n");
      out.write("</tr>\n");
      out.write("</table>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("// One Time Click Color Change ...\n");
      out.write("var color_count = 1;\n");
      out.write("function setColor(btn) {\n");
      out.write("   var property = document.getElementById(btn);\n");
      out.write("   if (color_count == 1) {\n");
      out.write("      property.style.backgroundColor = \"#FFBBBB\"\n");
      out.write("      property.innerHTML = \"Refreshing Stopped\"\n");
      out.write("      color_count = 0;\n");
      out.write("   }\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("<button id=\"button\" onclick=\"clearInterval(auto);setColor('button')\">Stop Updating Job Status</button>\n");
      out.write("\n");


} 	// end if action masking

   out.println("<br />");
   out.println("<i>Report available after Profile Job completed Successfully</i><br />");
   //out.println("<a href=\"jsonfiles/inventory_job.out1\" target=\"_blank\">Inventory List</a><br />");
   out.println("<a href=\"jsonfiles/json.out1\" target=\"_blank\">Inventory Report (JSON)</a><br />");
   // 
   // HTML Inventory Report ...
   // 
   cmd = jsonpath+"report.sh \""+jsonpath+"json.out1\"";
   //out.println("CMD: "+cmd+"<br />");
   str = doCommand(cmd);
   //out.println(str+"<br />");
   out.println("<a href=\"jsonfiles/json.out1.html\" target=\"_blank\">Inventory Report (HTML)</a><br />");

} 		// end if engine and action ...


      out.write("\n");
      out.write("</center>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
