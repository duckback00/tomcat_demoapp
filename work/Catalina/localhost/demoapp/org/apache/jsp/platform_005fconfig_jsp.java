/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.56
 * Generated at: 2020-03-24 15:28:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;
import javax.servlet.*;
import org.json.simple.*;
import org.json.simple.parser.*;
import java.text.SimpleDateFormat;

public final class platform_005fconfig_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


// 
// Just run local shell commands for now ... 
// FUTURE: Convert to API calls directly to Engine 
//
public String doCommand(String cmd){
   String directory = "";
   try {
      int exitCode;
      // out.println("Setting Shell Environment ...");
      String [] params = new String[]{"/bin/bash", "-c", "cd "+System.getProperty("user.home")+";. ./.delphix_profile 1> /dev/null;set -e;" + cmd };
      //String [] params = new String[]{"/bin/bash", "-c", "cd "+System.getProperty("user.home")+";. ./.delphix_profile 1> /dev/null;set -e;" + ""+request.getParameter("dir")};
      int c;
      BufferedReader b;
      // System.out.println("Parameters ..."+params);
      Process subProc = Runtime.getRuntime().exec(params);
      StringBuffer sb = new StringBuffer();
      // System.out.println("Opening Buffer for Reading ...");
      b = new BufferedReader(new InputStreamReader(subProc.getInputStream()));
      c = b.read();
      while (c != -1) {
        sb.append((char)c);
        c = b.read();
      }
      b.close();
      // System.out.println("Buffer Closed ...");
      exitCode = subProc.waitFor();
      if (exitCode != 0) {
        sb = new StringBuffer();
        b = new BufferedReader(new InputStreamReader(subProc.getErrorStream()));
        c = b.read();
        while (c != -1) {
           sb.append((char)c);
           c = b.read();
        }    //end while
        b.close();
        System.out.println("ERROR: Output from 'doCommand' "+ sb.toString());
      } else {
         //System.out.println("Output from 'doCommand' "+ sb.toString());
         directory =  sb.toString().trim();
      }
   } catch(Exception e) {
      System.out.println("ERROR: "+e.getMessage());
   }
   return directory;
}



public String getJob(String job){
   String str = doCommand("/Users/abitterman/Development/APIs/book/API/job_status.sh "+job+"");
   System.out.println(str+"<br />");
   String jobstate = "";
   String percentcomplete = "";
   try {
      if (str != "") {
         JSONParser parser = new JSONParser();
         JSONObject jsonObject = (JSONObject) parser.parse(str);
         jobstate = (String) jsonObject.get("JobState");
         percentcomplete = (String) jsonObject.get("PercentComplete");
         System.out.println(jobstate+" "+percentcomplete);
      }
   } catch(Exception e) {
      System.out.println("ERROR: "+e.getMessage());
   }
   String result = "[ \""+jobstate+"\", \""+percentcomplete+"\" ]";
   return result;
}


public boolean isJSONValid(String test) {
    try {
        JSONParser parser = new JSONParser();
        JSONObject obj = (JSONObject) parser.parse(test);
    } catch (Exception ex) {
        // e.g. in case JSONArray is valid as well...
        try {
        JSONParser parser1 = new JSONParser();
         JSONArray arr = (JSONArray) parser1.parse(test);
        } catch (Exception ex1) {
            return false;
        }
    }
    return true;
}

/**
 * Sample usage:
 * <pre>
 * Writer writer = new JSONWriter(); // this writer adds indentation
 * jsonobject.writeJSONString(writer);
 * System.out.println(writer.toString());
 * </pre>
 * 
 * @author Elad Tabak
 * @author Maciej Komosinski, minor improvements, 2015
 * @since 28-Nov-2011
 * @version 0.2
 */
public class JSONWriter extends StringWriter
{
	final static String indentstring = "  "; //define as you wish
	final static String spaceaftercolon = " "; //use "" if you don't want space after colon

	private int indentlevel = 0;

	@Override
	public void write(int c)
	{
		char ch = (char) c;
		if (ch == '[' || ch == '{')
		{
			super.write(c);
			super.write('\n');
			indentlevel++;
			writeIndentation();
		} else if (ch == ',')
		{
			super.write(c);
			super.write('\n');
			writeIndentation();
		} else if (ch == ']' || ch == '}')
		{
			super.write('\n');
			indentlevel--;
			writeIndentation();
			super.write(c);
		} else if (ch == ':')
		{
			super.write(c);
			super.write(spaceaftercolon);
		} else
		{
			super.write(c);
		}

	}

	private void writeIndentation()
	{
		for (int i = 0; i < indentlevel; i++)
		{
			super.write(indentstring);
		}
	}
}


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/self_classes.jsp", Long.valueOf(1527219588000L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"       \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');

String sessionid = "";
if (request.getParameter("sessionid") == null) {
   //session.invalidate();
   sessionid = UUID.randomUUID().toString();
} else {
   sessionid = (String) request.getParameter("sessionid");
}

   //
   // Application Variables ...
   //
   //Random rand = new Random(); 
   //int val = rand.nextInt(999); 
   String timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
   // out.println(timeStamp);

   String str = "";
   String msg = "";        // Process Request Returned Msg 

   String enginename = "";
   String enginetype = "";
   String protocol = "";
   String hostname = "";
   String username = "";
   String userpwd = "";
   String baseurl = "";
   String dlpxtype = "";
   String parent = "";

   String engine = "";
   engine = (request.getParameter("engine") != null) ? request.getParameter("engine") : "";

   String submit = "";
   submit = (request.getParameter("submit") != null) ? request.getParameter("submit") : "";

   String test = "";
   test = (request.getParameter("test") != null) ? request.getParameter("test") : "";

   //
   // Page Banner ...
   //
   String ban = "<center><table border=0 style=\"background-color:black;width:100%;\">\n";
   ban = ban + "<tr><td style=\"padding-left:100px;\" width=\"40%\" align=\"center\" valign=\"top\"><a href=\"index.jsp?sessionid="+sessionid+"\"><image src=\"img/delphix-logo-white.png\" border=0 /></a></td>\n";
//   ban = ban + "<td align=\"center\" width=\"140\" valign=\"middle\">Delphix Rocks</td>\n";
   ban = ban + "<td align=\"right\" valign=\"bottom\"><span style=\"padding-right:140px;font-size:18pt;\"><font color=\"#1AD6F5\">Delphix Platform Connections</font></span></td>\n";
   ban = ban + "</tr>\n";
//msg = "Hello <b>"+usr+"</b>!";
   //if (msg != null) {
   //  ban = ban + "<tr style=\"background-color:white;width:100%;\"><td align=\"right\" style=\"color:blue;\"><i>:System Message:</i></td><td colspan=2>"+msg+"</td></tr>\n";
   //}
   ban = ban + "</table></center>\n";

   String path = application.getRealPath("/").replace('\\', '/');
   String lchar = path.substring(path.length() - 1);
   if ( ! lchar.equals("/") ) {
      path = path + "/";
   }
   // ... or ... path = getServletContext().getRealPath("/").replace('\\', '/');
   //out.println("Path "+path+"<br />");

   String jsonpath = path+"jsonfiles"+File.separator;
   String jsonFile = "delphix_platforms.json";

   /////////////////////////////////////////////////////////////
   // Let the fun begin ...

   //
   // Method Test ...
   //
   //out.println( doCommand("pwd") );
   //out.println("<hr />");

   //
   // JSON Parser ...
   //
   JSONParser parser = new JSONParser();
   boolean isValid;

   // 
   // Process Requests ...
   //

   //
   // Form Values ...
   //
   String ename = (request.getParameter("enginename") != null) ? request.getParameter("enginename") : "";
   String type = (request.getParameter("enginetype") != null) ? request.getParameter("enginetype") : "";
   String proto = (request.getParameter("protocol") != null) ? request.getParameter("protocol") : "";
   String host = (request.getParameter("hostname") != null) ? request.getParameter("hostname") : "";
   String usr = (request.getParameter("username") != null) ? request.getParameter("username") : "";
   String pwd = (request.getParameter("userpwd") != null) ? request.getParameter("userpwd") : "";

   //
   // Test Connection Button ...
   // 
   if ( ! test.equals("") && ! engine.equals("") ) { 
      if ( type.equals("Virtualization") ) {
         //out.println("Connection Test: "+path+"api/authentication_tc.sh \""+jsonpath+jsonFile+"\" \""+engine+"\"<br />");
         str = doCommand(path+"api/authentication_tc.sh \""+jsonpath+jsonFile+"\" \""+engine+"\"");
      } else if ( type.equals("Masking") ) {
         //out.println("Connection Test: "+path+"api/authmasking.sh "+jsonpath+jsonFile+" "+engine+"<br />");
         str = doCommand(path+"api/authmasking.sh \""+jsonpath+jsonFile+"\" \""+engine+"\"");
      } else {
         str = "Warning: No Engine Type Assigned "+type+" ... "; 
      }
      //out.println(str);
      msg = str;
   }		// end if test ...

   //
   // Process Submit Request ...
   //
   if ( ! submit.equals("")) {
      //out.println("Submit: "+submit+"<br />");

      // 
      // Read Config File ...
      //
      str = doCommand("cat "+jsonpath+jsonFile);
      //out.println(str);

      //
      // Parse Config JSON Data ...
      //
      int delidx = -1;
      String engchk = "New";
      isValid = isJSONValid(str);
      if (isValid) {
         Object obj = parser.parse(str);
         JSONObject jsonObject = (JSONObject) obj;
         JSONArray jarr = (JSONArray) jsonObject.get("engines");
         for (int i=0; i < jarr.size(); i++) {
            JSONObject pobj = (JSONObject) jarr.get(i);
            // out.println(i);
            // Long id = (Long) pobj.get("employee_id");
            enginename = (String) pobj.get("enginename");

            // 
            // Check for Unique Name ...
            //
            if ( engine.equals(ename) ) {
               engchk = "Found";
            }
            // 
            // Found Engine Name for either Deleting or Updating ...
            //
            if ( engine.equals(enginename) ) {
               if ( submit.equals("Delete")) { delidx = i; }
               if ( submit.equals("Update")) {
                  pobj.put("enginetype",type);
                  pobj.put("protocol",proto);
                  pobj.put("hostname",host);
                  pobj.put("username",usr);
                  pobj.put("password",pwd);
                  msg = engine + " updated ...";
               }
            }

         }	// end for i=0 jarr ...

         //
         // Delete jarr index ...
         //
         if ( submit.equals("Delete")) { 
            jarr.remove(delidx); 
            msg = engine + " deleted ...";
            engine="";
         }

         // 
         // Add new record if name is unique ...
         // 
         if ( submit.equals("Add") ) {
            // 
            // Have Unique Name ...
            //
            if ( engchk.equals("New") ) {
               JSONObject js = new JSONObject();
               js.put("enginename",ename);
               js.put("enginetype",type);
               js.put("protocol",proto);
               js.put("hostname",host);
               js.put("username",usr);
               js.put("password",pwd);
               jarr.add(js);
               engine=ename;
               msg = engine + " added ...";
            } else {
               msg = "Error: " + engine + " name already Exists ...";
            }
         }	// end if add ...

         // 
         // Convert Object to String for Writing to File ...
         //
         String json = jsonObject.toString();
         //out.println("json: "+json+"<br />");

         // 
         // Write Out New configuration ...
         //
         str = doCommand("mv "+jsonpath+jsonFile+" "+jsonpath+jsonFile+"_"+timeStamp);
         //out.println(str);
         try {
            String configFilename = jsonpath+jsonFile;
            //File configFile = new File(configFilename);
            FileWriter file = new FileWriter(configFilename);
            file.write(json);
            file.flush();
            file.close();
            msg = msg + " config file saved";
         } catch (Exception e) {
            e.printStackTrace();
         }	// end try ...

      }		// end if str isValid ...

   }		// end if submit ...


   ////////////////////////////////////////////////////////////
   // HTML Output ...


      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<title>Delphix Self Service Rocks</title>\n");
      out.write("<style>\n");
      out.write("body {\n");
      out.write("   padding-top: 20px;\n");
      out.write("   padding-bottom: 60px;\n");
      out.write("   margin: 0px;\n");
      out.write("}\n");
      out.write("table { border-collapse: collapse; width: 540px; }\n");
      out.write("table, th, td { padding:2px; border:1px ridge black; }\n");
      out.write("fieldset\n");
      out.write("{\n");
      out.write("  background-color:#EEEEEE;\n");
      out.write("  max-width:600px;\n");
      out.write("  padding:16px;\t\n");
      out.write("}\n");
      out.write("legend\n");
      out.write("{\n");
      out.write("  margin-bottom:0px;\n");
      out.write("  margin-left:16px;\n");
      out.write("}\n");
      out.write(".accordion {\n");
      out.write("    background-color: #eee;\n");
      out.write("    color: #444;\n");
      out.write("    cursor: pointer;\n");
      out.write("    padding: 2px;\n");
      out.write("    width: 100%;\n");
      out.write("    border: none;\n");
      out.write("    text-align: left;\n");
      out.write("    outline: none;\n");
      out.write("    font-size: 15px;\n");
      out.write("    transition: 0.4s;\n");
      out.write("}\n");
      out.write(".active, .accordion:hover {\n");
      out.write("    background-color: #ccc;\n");
      out.write("}\n");
      out.write(".panel {\n");
      out.write("    padding: 0 18px;\n");
      out.write("    display: none;\n");
      out.write("    background-color: white;\n");
      out.write("    overflow: hidden;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<center>\n");
      out.write("\n");
      out.print(ban);
      out.write("\n");
      out.write("\n");
      out.write("<h3>Delphix Dynamic Data Platform Configuration File</h3>\n");
      out.write("\n");
      out.write("\n");
      out.write("<fieldset>\n");
      out.write("<legend>System Messages</legend>\n");

//
// System Message ...
//
if ( ! msg.equals("") ) {

      out.write("\n");
      out.write("   <span style=\"background-color:#eee;\"><font color=blue>&nbsp;&nbsp;<i>:system message:</i> &nbsp;&nbsp; ");
      out.print(msg);
      out.write(" &nbsp;&nbsp;</font></span>\n");
      out.write("<br />\n");

} else { out.println("<br />"); }

      out.write("\n");
      out.write("</fieldset>\n");
      out.write("<br />\n");
      out.write("\n");
      out.write("<form name=\"form0\" method=\"post\" action=\"\">\n");
      out.write("<input type=\"hidden\" name=\"sessionid\" value=\"");
      out.print(sessionid);
      out.write("\" />\n");
      out.write("\n");
      out.write("<fieldset>\n");
      out.write("<legend>Platforms</legend>\n");
      out.write("\n");
      out.write("Select Delphix Platform:\n");
      out.write("<select name=\"engine\" onchange=\"this.form.submit()\">\n");
      out.write("<option value=\"\">-- New Config --</option>\n");

   //
   // Engines ...
   //
   str = doCommand("cat "+jsonpath+jsonFile);
   //out.println(str);

   Writer writer = new JSONWriter(); // this writer adds indentation

String strdb = "";

   isValid = isJSONValid(str);
   if (isValid) {
      Object obj = parser.parse(str);
      JSONObject jsonObject = (JSONObject) obj;

jsonObject.writeJSONString(writer);
strdb = writer.toString();

      JSONArray jarr = (JSONArray) jsonObject.get("engines");
      for (int i=0; i < jarr.size(); i++) {
         JSONObject pobj = (JSONObject) jarr.get(i);
         // out.println(i);
         // Long id = (Long) pobj.get("employee_id");
         enginename = (String) pobj.get("enginename");

         if ( engine.equals(enginename) ) {
            enginetype = (String) pobj.get("enginetype");
            protocol = (String) pobj.get("protocol");
            hostname = (String) pobj.get("hostname");
            username = (String) pobj.get("username");
            userpwd = (String) pobj.get("password");
            baseurl = protocol + "://" + hostname + "/resources/json/delphix";
            //out.println("enginename: "+enginename+" baseurl: "+baseurl+"<br />");

      out.write("\n");
      out.write("   <option value=\"");
      out.print(enginename);
      out.write("\" selected>");
      out.print(enginename);
      out.write("</option>\n");

         } else {

      out.write("\n");
      out.write("   <option value=\"");
      out.print(enginename);
      out.write('"');
      out.write('>');
      out.print(enginename);
      out.write("</option>\n");

         }

      }         // end for loop ...

   } else {
      out.println("Error: Invalid JSON String "+str+"<br />");
   }    // end if isValid ...
   //out.println("<hr />");


      out.write("\n");
      out.write("</select>\n");
      out.write("<br />\n");
      out.write("\n");
      out.write("<br />\n");
      out.write("<span class=\"accordion\"><font color=grey>Expand/Collapse Engines Info</font></span>\n");
      out.write("<div class=\"panel\" style=\"text-align:left;\">\n");
      out.write("<pre>\n");

   //strdb
   out.println("Excluding Passwords ...");
   int count = 1;
   String[] lines = strdb.split("\\r?\\n");
   for (String line : lines) {
      if ( ! line.toLowerCase().contains("\"password\"") ) {
         out.println("" + count + " : " + line + "");
      } else { 
         out.println("" + count + " : " + "      \"password\": \"*******\","); 
      }
      count++;
   }

      out.write("\n");
      out.write("</pre>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("</fieldset>\n");
      out.write("</form>\n");
      out.write("<br />\n");
      out.write("\n");
      out.write("<form name=\"form1\" method=\"post\" action=\"\">\n");
      out.write("<input type=\"hidden\" name=\"engine\" value=\"");
      out.print(engine);
      out.write("\" />\n");
      out.write("<fieldset>\n");
      out.write("<legend>Parameters</legend>\n");
      out.write("\n");
      out.write("<table>\n");
      out.write("<tr><th colspan=2>Configure Delphix Platform</th></tr>\n");
      out.write("\n");
      out.write("<tr>\n");
      out.write("<td align=\"right\">Engine Name: </td>\n");
      out.write("<td align=\"left\"> <input size=30 type=\"text\" name=\"enginename\" value=\"");
      out.print(engine);
      out.write("\" />\n");
      out.write("&nbsp;&nbsp;\n");
      out.write("<input type=\"submit\" name=\"test\" value=\"Test\" onclick=\"this.form.submit();\" />\n");
      out.write("<font color=blue><font size=-1>(Saved Configs Only)</font></font>\n");
      out.write("</td>\n");
      out.write("</tr>\n");
      out.write("\n");
      out.write("<tr>\n");
      out.write("<td align=\"right\">Engine Type: </td>\n");
      out.write("<td align=\"left\"> \n");
      out.write("&nbsp;&nbsp; \n");
      out.write("<input type=\"radio\" name=\"enginetype\" value=\"Virtualization\" \n");
 
if ( enginetype.equals("Virtualization")) {

      out.write("\n");
      out.write(" checked  \n");

}

      out.write("\n");
      out.write("/>\n");
      out.write("Virtualization\n");
      out.write("&nbsp;&nbsp;\n");
      out.write("<input type=\"radio\" name=\"enginetype\" value=\"Masking\" \n");
  
if ( enginetype.equals("Masking")) { 

      out.write(" \n");
      out.write(" checked \n");

}

      out.write("\n");
      out.write("/>\n");
      out.write("Masking\n");
      out.write("</td>\n");
      out.write("</tr>\n");
      out.write("\n");
      out.write("<tr>\n");
      out.write("<td align=\"right\">Protocol: </td>\n");
      out.write("<td align=\"left\"> <input size=30 type=\"text\" name=\"protocol\" value=\"");
      out.print(protocol);
      out.write("\" /> \n");
      out.write("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n");
      out.write("<font color=blue><font size=-1>(http or https)</font></font>\n");
      out.write("</td>\n");
      out.write("</tr>\n");
      out.write("\n");
      out.write("<tr>\n");
      out.write("<td align=\"right\">Hostname: </td>\n");
      out.write("<td align=\"left\"> \n");
      out.write("<input size=30 type=\"text\" name=\"hostname\" value=\"");
      out.print(hostname);
      out.write("\" />\n");
      out.write("&nbsp;&nbsp;\n");
      out.write("<font color=blue><font size=-1>(for Masking include :[port]/dmsuite/)</font></font>\n");
      out.write("</td>\n");
      out.write("</tr>\n");
      out.write("\n");
      out.write("<tr>\n");
      out.write("<td align=\"right\">Username: </td>\n");
      out.write("<td align=\"left\"> <input size=30 type=\"text\" name=\"username\" value=\"");
      out.print(username);
      out.write("\" /></td>\n");
      out.write("</tr>\n");
      out.write("\n");
      out.write("<tr>\n");
      out.write("<td align=\"right\">Password: </td>\n");
      out.write("<td align=\"left\"> <input size=30 type=\"password\" name=\"userpwd\" value=\"");
      out.print(userpwd);
      out.write("\" /></td>\n");
      out.write("</tr>\n");
      out.write("\n");
      out.write("<tr><td align=\"center\" colspan=2>\n");

if ( ! engine.equals("") ) {

      out.write("\n");
      out.write("<input type=\"submit\" name=\"submit\" value=\"Update\" />&nbsp;&nbsp;\n");
      out.write("<input type=\"submit\" name=\"submit\" value=\"Delete\" onclick=\"return confirm('Confirm Delete? ')\" />&nbsp;&nbsp;\n");

}       // end if engine ...

      out.write("\n");
      out.write("<input type=\"submit\" name=\"submit\" value=\"Add\" />\n");
      out.write("</td></tr>\n");
      out.write("\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("</fieldset>\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("var acc = document.getElementsByClassName(\"accordion\");\n");
      out.write("var i;\n");
      out.write("\n");
      out.write("for (i = 0; i < acc.length; i++) {\n");
      out.write("    acc[i].addEventListener(\"click\", function() {\n");
      out.write("        this.classList.toggle(\"active\");\n");
      out.write("        var panel = this.nextElementSibling;\n");
      out.write("        if (panel.style.display === \"block\") {\n");
      out.write("            panel.style.display = \"none\";\n");
      out.write("        } else {\n");
      out.write("            panel.style.display = \"block\";\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<br />\n");
      out.write("</center>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
